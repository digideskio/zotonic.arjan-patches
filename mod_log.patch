diff -r 926048da72fd modules/mod_log/dispatch/dispatch
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/dispatch/dispatch	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,4 @@
+%% Dispatch rule for a predicate list page
+[
+	{admin_log,  	["admin", "log"],					resource_admin,					[{template, "admin_log.tpl"}, {selected, "log"}]}
+].
diff -r 926048da72fd modules/mod_log/mod_log.erl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/mod_log.erl	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,191 @@
+%% @author Arjan Scherpenisse <arjan@scherpenisse.net>
+%% @copyright 2010 Arjan Scherpenisse
+%% @date 2010-06-01
+%% @doc Simple database logging.
+
+%% Copyright 2010 Arjan Scherpenisse
+%%
+%% Licensed under the Apache License, Version 2.0 (the "License");
+%% you may not use this file except in compliance with the License.
+%% You may obtain a copy of the License at
+%% 
+%%     http://www.apache.org/licenses/LICENSE-2.0
+%% 
+%% Unless required by applicable law or agreed to in writing, software
+%% distributed under the License is distributed on an "AS IS" BASIS,
+%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+%% See the License for the specific language governing permissions and
+%% limitations under the License.
+
+-module(mod_log).
+-author("Arjan Scherpenisse <arjan@scherpenisse.net>").
+-behaviour(gen_server).
+
+-mod_title("Message logging").
+-mod_description("Logs debug/info/warning messages into the site's database.").
+-mod_prio(1000).
+
+%% gen_server exports
+-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).
+-export([start_link/1]).
+-export([observe/2, add_admin_log_page/1]).
+
+%% interface functions
+
+-include("zotonic.hrl").
+
+-record(state, {context, admin_log_pages=[]}).
+
+
+
+
+observe({search_query, Req, OffsetLimit}, Context) ->
+    search(Req, OffsetLimit, Context).
+
+
+add_admin_log_page(C=#context{page_pid=Pid}) ->
+    z_notifier:first({add_admin_log_page, Pid}, C).
+
+
+%%====================================================================
+%% API
+%%====================================================================
+%% @spec start_link() -> {ok,Pid} | ignore | {error,Error}
+%% @doc Starts the server
+start_link(Args) when is_list(Args) ->
+    gen_server:start_link(?MODULE, Args, []).
+
+%%====================================================================
+%% gen_server callbacks
+%%====================================================================
+
+%% @spec init(Args) -> {ok, State} |
+%%                     {ok, State, Timeout} |
+%%                     ignore               |
+%%                     {stop, Reason}
+%% @doc Initiates the server.
+init(Args) ->
+    process_flag(trap_exit, true),
+    {context, Context} = proplists:lookup(context, Args),
+
+    Context1 = z_acl:sudo(z_context:new(Context)),
+    z_notifier:observe(search_query, {?MODULE, observe}, Context),
+    z_notifier:observe(add_admin_log_page, self(), Context),
+
+    install_check(Context1),
+
+    %% Watch for log events
+    z_notifier:observe(log, self(), Context),
+    {ok, #state{context=Context1}}.
+
+
+%% @spec handle_call(Request, From, State) -> {reply, Reply, State} |
+%%                                      {reply, Reply, State, Timeout} |
+%%                                      {noreply, State} |
+%%                                      {noreply, State, Timeout} |
+%%                                      {stop, Reason, Reply, State} |
+%%                                      {stop, Reason, State}
+%% Description: Handling call messages
+%% @doc Trap unknown calls
+handle_call({{add_admin_log_page, Pid}, _Ctx}, _From, State) ->
+    ?DEBUG("Adding admin log.."),
+    Pids = lists:filter(fun erlang:is_process_alive/1, [Pid|State#state.admin_log_pages]),
+    {reply, ok, State#state{admin_log_pages=Pids}};
+handle_call(Message, _From, State) ->
+    {stop, {unknown_call, Message}, State}.
+
+handle_cast({{log, debug, Msg}, Ctx}, State=#state{context=Context}) ->
+    {ok, Id} = z_db:insert(log, [
+                                 {user_id, z_acl:user(Ctx)},
+                                 {type, "debug"},
+                                 {message, Msg}], Context),
+
+    {Tpl, _Ctx} = z_template:render_to_iolist("_admin_log_row.tpl", [{id, Id}], Context),
+    Tpl2 = lists:reverse(lists:flatten(z_string:line(erlang:iolist_to_binary(Tpl)))),
+    F = fun(Pid) ->
+                z_session_page:add_script(["$('", Tpl2, "').hide().insertAfter('#log-headers').slideDown();"], Pid)
+        end,
+    [F(P) || P <- State#state.admin_log_pages],
+
+    {noreply, State};
+
+%% @doc Trap unknown casts
+handle_cast(Message, State) ->
+    {stop, {unknown_cast, Message}, State}.
+
+
+%% @spec handle_info(Info, State) -> {noreply, State} |
+%%                                       {noreply, State, Timeout} |
+%%                                       {stop, Reason, State}
+%% @doc Handling all non call/cast messages
+handle_info(_Info, State) ->
+    {noreply, State}.
+
+%% @spec terminate(Reason, State) -> void()
+%% @doc This function is called by a gen_server when it is about to
+%% terminate. It should be the opposite of Module:init/1 and do any necessary
+%% cleaning up. When it returns, the gen_server terminates with Reason.
+%% The return value is ignored.
+terminate(_Reason, State) ->
+    Context = State#state.context,
+    z_notifier:detach(search_query, {?MODULE, observe}, Context),
+    z_notifier:detach(add_admin_log_page, self(), Context),
+    z_notifier:detach(log, self(), Context),
+    ok.
+
+
+%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
+%% @doc Convert process state when code is changed
+code_change(_OldVsn, State, _Extra) ->
+    {ok, State}.
+
+
+%%====================================================================
+%% support functions
+%%====================================================================
+
+
+install_check(Context) ->
+    case z_db:table_exists(log, Context) of
+        true -> ok;
+        false ->
+            ?DEBUG("Creating log table."),
+            z_db:q("
+                create table log (
+                    id serial not null,
+                    rsc_id int,
+                    user_id int,
+                    type character varying(80) not null default ''::character varying,
+                    props bytea,
+                    created timestamp with time zone not null default now(),
+
+                    constraint log_pkey primary key (id),
+                    constraint fk_log_rsc_id foreign key (rsc_id)
+                        references rsc(id)
+                        on delete set null on update cascade,
+                    constraint fk_log_user_id foreign key (user_id)
+                        references rsc(id)
+                        on delete set null on update cascade
+                )
+            ", Context),
+            Indices = [
+                       {"fki_log_rsc_id", "rsc_id"},
+                       {"fki_log_user_id", "user_id"},
+                       {"log_type_created_key", "type, created"},
+                       {"log_created_key", "created"}
+                      ],
+            [ z_db:q("create index "++Name++" on log ("++Cols++")", Context) || {Name, Cols} <- Indices ]
+    end.
+
+
+
+search({log, []}, _OffsetLimit, _Context) ->
+    #search_sql{
+        select="l.id",
+        from="log l",
+        tables=[{log, "l"}],
+        order="created DESC"
+       };
+search(_, _, _) ->
+    undefined.
+
diff -r 926048da72fd modules/mod_log/models/m_log.erl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/models/m_log.erl	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,68 @@
+%% @author Arjan Scherpenisse <arjan@scherpenisse.net>
+%% @copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
+%% @date 2010-06-01
+%%
+%% @doc Model for log messages.
+
+%% Copyright 2010 Arjan Scherpenisse
+%%
+%% Licensed under the Apache License, Version 2.0 (the "License");
+%% you may not use this file except in compliance with the License.
+%% You may obtain a copy of the License at
+%% 
+%%     http://www.apache.org/licenses/LICENSE-2.0
+%% 
+%% Unless required by applicable law or agreed to in writing, software
+%% distributed under the License is distributed on an "AS IS" BASIS,
+%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+%% See the License for the specific language governing permissions and
+%% limitations under the License.
+
+-module(m_log).
+-author("Arjan Scherpenisse <arjan@scherpenisse.net>").
+
+-behaviour(gen_model).
+
+%% interface functions
+-export([
+    m_find_value/3,
+    m_to_list/2,
+    m_value/2,
+    get/2
+]).
+
+
+-include_lib("zotonic.hrl").
+
+
+m_find_value(Index, #m{value=undefined} = M, _Context) ->
+    get(Index, _Context).
+
+
+%% @doc Transform a m_config value to a list, used for template loops
+%% @spec m_to_list(Source, Context)
+m_to_list(#m{value=undefined}, Context) ->
+    list(Context);
+m_to_list(#m{value={log, Id}}, Context) ->
+    get(Id, Context);
+m_to_list(_, _Context) ->
+    [].
+
+
+m_value(#m{value=#m{value={log, Id}}}, Context) ->
+    get(Id, Context).
+
+
+get(Id, Context) ->
+    {ok, R} = z_db:select(log, Id, Context),
+    R.
+
+
+list(Context) ->
+    All = z_db:assoc("SELECT * FROM log ORDER BY created DESC", Context),
+    [merge_props(R) || R <- All].
+
+merge_props(R) ->
+    proplists:delete(props, R) ++ proplists:get_value(props, R, []).
+
+
diff -r 926048da72fd modules/mod_log/scomps/scomp_log_logwatch.erl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/scomps/scomp_log_logwatch.erl	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,36 @@
+%% @author Arjan Scherpenisse <arjan@scherpenisse.net>
+%% @copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
+
+%% Copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
+%%
+%% Licensed under the Apache License, Version 2.0 (the "License");
+%% you may not use this file except in compliance with the License.
+%% You may obtain a copy of the License at
+%% 
+%%     http://www.apache.org/licenses/LICENSE-2.0
+%% 
+%% Unless required by applicable law or agreed to in writing, software
+%% distributed under the License is distributed on an "AS IS" BASIS,
+%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+%% See the License for the specific language governing permissions and
+%% limitations under the License.
+
+-module(scomp_log_logwatch).
+-behaviour(gen_scomp).
+
+-export([vary/2, render/3]).
+-export([logmessage/2]).
+
+-include("zotonic.hrl").
+
+vary(_Params, _Context) -> nocache.
+render(_Params, _Vars, Context) ->
+%%    Context1 = z_session:ensure_page_session(Context),
+    %?DEBUG(self()),
+    mod_log:add_admin_log_page(Context),
+    {ok, "<h1>Hoi</h1>"}.
+
+logmessage({admin_logmessage, Msg}, _C) ->
+    ?DEBUG("xxxxxxxxxxxxx!!!"),
+    ?DEBUG(_C),
+    z_context:add_script_session(["alert('", Msg, "');"], _C).
diff -r 926048da72fd modules/mod_log/templates/_admin_log_row.tpl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/templates/_admin_log_row.tpl	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,8 @@
+				<li id="{{ #li.id }}" style="height: 27px">
+					<a href="#" class="clearfix">
+                        <span class="zp-5">{{ m.log[id].type|default:"-" }}</span>
+                        <span class="zp-5">{{ m.log[id].user_id|default:"-" }}</span>
+                        <span class="zp-10">{{ m.log[id].created|date:"d M Y, H:i" }}</span>
+                        <span class="zp-80">{{ m.log[id].message }}</span>
+                    </a>
+                </li>
diff -r 926048da72fd modules/mod_log/templates/_admin_menu_module.tpl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/templates/_admin_menu_module.tpl	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,3 @@
+{% if m.acl.is_admin %}
+<li><a href="{% url admin_log %}" {% if selected == "log" %}class="current"{% endif %}>{_ Log _}</a></li>
+{% endif %}
diff -r 926048da72fd modules/mod_log/templates/admin_log.tpl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/modules/mod_log/templates/admin_log.tpl	Wed Jun 02 09:38:52 2010 +0200
@@ -0,0 +1,61 @@
+{% extends "admin_base.tpl" %}
+
+{% block title %}{_ Log _}{% endblock %}
+
+{% block content %}
+
+	<div id="content" class="zp-85">
+		<div class="block clearfix">
+
+		<h2>Log messages</h2>
+
+			<form id="{{ #form }}" method="GET" action="{% url admin_overview_rsc qs=q.qs %}">
+				<input type="hidden" name="qsort" value="{{ q.qsort }}" />
+				<input type="hidden" name="qs" value="{{ q.qs }}" />
+				<h3 class="above-list ">
+					{_ Messages overview _}{% if q.qs %}, 
+						{_ matching _} “{{ q.qs|escape }}”
+						{% button text="show all" action={redirect dispatch="admin_overview_rsc" qcat=q.qcat} %}
+						<input type="hidden" name="qs" value="{{ q.qs|escape }}" />
+					{% endif %}
+
+					{% with q.qcat as qcat %}
+						&mdash; {_ filter on category _}
+						<select id="{{ #type }}" name="qcat">
+							<option value="">{_ All types _}</option>
+							<option value="debug" {% ifequal type "debug" %}selected="selected" {% endifequal %}>
+                                {_ Debug _}
+							</option>
+						</select>
+						{% wire type="change" id=#type action={submit} %}
+					{% endwith %}
+				</h3>
+			</form>
+
+			<ul class="short-list" style="height: 600px; overflow: auto">
+				<li class="headers clearfix" id="log-headers">
+                    <span class="zp-5">{_ Type _}</span>
+                    <span class="zp-5">{_ User _}</span>
+                    <span class="zp-10">{_ Date _}</span>
+                    <span class="zp-80">{_ Message _}</span>
+				</li>
+
+                {% with m.search[{log page=1 pagelen=20}] as result %}
+                {% for id in result %}
+                {% include "_admin_log_row.tpl" id=id %}
+                {% empty %}
+				<li>
+					{_ No pages found. _}
+				</li>
+                {% endfor %}
+			</ul>
+{#			{% pager result=result dispatch="admin_log" qargs %}             #}
+
+            {% endwith %}
+        </ul>
+
+		{% logwatch %}
+		</div>
+	</div>
+
+{% endblock %}
diff -r 926048da72fd src/support/z.erl
--- a/src/support/z.erl	Tue Jun 01 15:12:57 2010 +0200
+++ b/src/support/z.erl	Wed Jun 02 09:38:52 2010 +0200
@@ -28,7 +28,9 @@
     m/0,
     flush/0,
 	flush/1,
-    restart/0
+    restart/0,
+
+         debug/2
 ]).
 
 -include_lib("zotonic.hrl").
@@ -61,3 +63,6 @@
     zotonic:stop(),
     zotonic:start().
 
+%% @doc Log a debug message
+debug(Msg, Context) ->
+    z_notifier:notify({log, debug, Msg}, Context).
