# HG changeset patch
# Parent be465aadf8b705d0a69079d7a058886771d69ee4
First version

diff --git a/src/support/z_media_preview.erl b/src/support/z_media_preview.erl
--- a/src/support/z_media_preview.erl
+++ b/src/support/z_media_preview.erl
@@ -58,6 +58,7 @@
                     z_utils:assert(EndHeight < ?MAX_HEIGHT, image_too_high),
                     Args1   = lists:flatten(z_utils:combine(32, CmdArgs)),
                     Cmd     = ["convert ", z_utils:os_filename(InFile++infile_suffix(Mime)), " ", Args1, " ", z_utils:os_filename(OutFile)],
+                    ?DEBUG(lists:flatten(Cmd)),
                     file:delete(OutFile),
                     ok = filelib:ensure_dir(OutFile),
                     Result  = z_media_preview_server:exec(lists:flatten(Cmd), OutFile),
@@ -371,6 +372,7 @@
 calc_size(Width, Height, ImageWidth, ImageHeight, CropPar, _Orientation, _IsUpscale) ->
     ImageAspect = ImageWidth / ImageHeight,
     Aspect      = Width / Height,
+
     case CropPar of
         none ->
             case Aspect > ImageAspect of
@@ -381,23 +383,29 @@
 			% When we are doing a crop then we have to calculate the
 			% maximum inner bounding box, and not the maximum outer 
 			% bounding box for the image
-		    {W,H} = case Aspect > ImageAspect of
-        		        true ->
-        				    % width is the larger one
-        				    {Width, Width / ImageAspect};
-        				false ->
-        				    % height is the larger one
-        				    {ImageAspect * Height, Height}
-        			end,
+		    {W,H} = case CropPar of
+                        {W1, H1, _L, _T} -> {W1, H1};
+                        _ ->
+                            case Aspect > ImageAspect of
+                                true ->
+                                                % width is the larger one
+                                    {Width, Width / ImageAspect};
+                                false ->
+                                                % height is the larger one
+                                    {ImageAspect * Height, Height}
+                            end
+                    end,
         	CropL = case CropPar of
         	            X when X == north_west; X == west; X == south_west -> 0;
         	            X when X == north_east; X == east; X == south_east -> ceil(W - Width);
-        	            _ -> ceil((W - Width) / 2)
+        	            center -> ceil((W - Width) / 2);
+                        {_W1, _H1, L, _T1} -> L
     	            end,
     	    CropT = case CropPar of
     	                Y when Y == north_west; Y == north; Y == north_east -> 0;
     	                Y when Y == south_west; Y == south; Y == south_east -> ceil(H - Height);
-    	                _ -> ceil((H - Height) / 2)
+    	                center -> ceil((H - Height) / 2);
+                        {_W2, _H2, _L1, T} -> T
 	                end,
 
 	        % @todo Prevent scaleup of the image, but preserve the result size
@@ -420,7 +428,8 @@
             "south_west" -> south_west;
             "west"       -> west;
             "north_west" -> north_west;
-            "center"     -> center
+            "center"     -> center;
+            Geom   -> parse_geometry(Geom)
           end,
     {crop,Dir};
 string2filter("grey",[]) ->
@@ -457,3 +466,15 @@
 
 ensure_integer(A) ->
     integer_to_list(list_to_integer(A)).
+
+
+parse_geometry(Geom) ->
+    case re:run(Geom, "^(\\d+)x(\\d+)\\+(\\d+)\\+(\\d+)", [{capture, all, list}]) of
+        nomatch ->
+            center;
+        {match, [_, W, H, L, T]} ->
+            {z_convert:to_integer(W),
+             z_convert:to_integer(H),
+             z_convert:to_integer(L),
+             z_convert:to_integer(T)}
+    end.
diff --git a/src/support/z_media_tag.erl b/src/support/z_media_tag.erl
--- a/src/support/z_media_tag.erl
+++ b/src/support/z_media_tag.erl
@@ -104,7 +104,9 @@
         Props when is_list(Props) ->
             case mediaprops_filename(Id, Props, Context) of
                 [] -> {ok, []};
-                Filename -> tag1(Props, Filename, Options, Context)
+                Filename -> 
+                    Options1 = preprocess_options(Id, Props, Options, Context),
+                    tag1(Props, Filename, Options1, Context)
             end;
         undefined ->
             case z_notifier:first({media_stillimage, Id, []}, Context) of
@@ -112,11 +114,8 @@
                 _ -> {ok, []}
             end
     end;
-tag([{_Prop, _Value}|_] = Props, Options, Context) ->
-    case mediaprops_filename(proplists:get_value(id, Props), Props, Context) of
-        [] -> {ok, []};
-        Filename -> tag1(Props, Filename, Options, Context)
-    end;
+tag([{_Prop, _Value}|_] = Props, Options, Context) -> %% medium record
+    tag(proplists:get_value(id, Props), Options, Context);
 tag(Filename, Options, Context) when is_binary(Filename) ->
     tag(binary_to_list(Filename), Options, Context);
 tag(Filename, Options, Context) when is_list(Filename) ->
@@ -185,6 +184,50 @@
     media_id([{_,_}|_] = List) ->
         proplists:get_value(id, List).
 
+
+%% @doc Perform option pre-processing. Mainly used to calculate the
+%% pre-cropping values for predefined croppings.
+preprocess_options(Id, Medium, Options, Context) ->
+    Options1 = case proplists:get_value(crop, Options) of
+                   undefined -> Options;
+                   true -> Options;
+                   false -> Options;
+                   Name when is_list(Name) orelse is_atom(Name) ->
+                       case proplists:get_value(Name, m_rsc:p(Id, crops, [], Context)) of
+                           undefined ->
+                               Options;
+                           Cropping ->
+                               SiteAspect = case m_site:get(named_crops, Context) of
+                                                undefined -> 1.0; %% No named crops
+                                                Cs ->
+                                                    proplists:get_value(aspect, hd([L || L <- Cs, proplists:get_value(name, L) == Name]), 1.0)
+                                            end,
+                               Aspect = proplists:get_value(aspect, Cropping, SiteAspect),
+
+                               EndWidth = case {proplists:get_value(width, Options), proplists:get_value(height, Options)} of
+                                              {undefined, undefined} -> 
+                                                  proplists:get_value(width, Medium);
+                                              {undefined, Height} ->
+                                                  z_convert:to_integer(Height*Aspect);
+                                              {Width, _} ->
+                                                  Width
+                                          end,
+                               ?DEBUG(Aspect),
+                               ?DEBUG(EndWidth),
+                               Scale = proplists:get_value(scale, Cropping),
+                               W = z_convert:to_integer(EndWidth / Scale),
+                               H = z_convert:to_integer((EndWidth/Aspect) / Scale),
+                               L = z_convert:to_integer((EndWidth * proplists:get_value(offset_x, Cropping))/Scale),
+                               T = z_convert:to_integer(((EndWidth/Aspect) * proplists:get_value(offset_y, Cropping))/Scale),
+                               ?DEBUG({W,H,L,T}),
+                               z_utils:prop_replace(crop, {W,H,L,T}, Options)
+                       end;
+                   _ -> 
+                       Options
+               end,
+    Options1.
+
+
 %% @doc Give the filepath for the filename being served.
 %% @todo Ensure the file is really in the given directory (ie. no ..'s)
 filename_to_filepath(Filename, #context{host=Host} = Context) ->
@@ -297,6 +340,8 @@
 
 props2url([{crop,None}|Rest], Width, Height, Acc) when None == false; None == undefined; None == <<>>; None == [] ->
     props2url(Rest, Width, Height, Acc);
+props2url([{crop,{W,H,L,T}}|Rest], Width, Height, Acc) ->
+    props2url(Rest, Width, Height, [["crop-",z_convert:to_list(W),$x,z_convert:to_list(H),$+,z_convert:to_list(L),$+,z_convert:to_list(T)]|Acc]);
 props2url([{width,Width}|Rest], _Width, Height, Acc) ->
     props2url(Rest, z_convert:to_integer(Width), Height, Acc);
 props2url([{height,Height}|Rest], Width, _Height, Acc) ->
