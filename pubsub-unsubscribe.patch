diff -r 638631995ea0 modules/mod_pubsub/mod_pubsub.erl
--- a/modules/mod_pubsub/mod_pubsub.erl	Sat Feb 06 08:42:28 2010 +0100
+++ b/modules/mod_pubsub/mod_pubsub.erl	Sat Feb 06 09:10:17 2010 +0100
@@ -136,12 +136,15 @@
 
         false ->
             %% Deleting non-authoritative content
-            case get_pubsub_subscription(Id, Context) of
+            case get_pubsub_xmpp_uri(Id, Context) of
                 undefined ->
                     {noreply, State};
-                Details ->
-                    {Service, Node, _SubscriptionId} = Details,
-                    ok = unsubscribe_node(Service, Node, State),
+                Uri ->
+                    ?DEBUG("Unsubscribing!"),
+                    {Jid, _Action, Args} = z_xmpp:parse_xmpp_uri(Uri),
+                    Node = proplists:get_value("node", Args),
+                    SubId = m_rsc:p(Id, pubsub_subscription_subid, Context),
+                    ok = unsubscribe_node(SubId, exmpp_jid:to_list(Jid), Node, State),
                     {noreply, State}
             end
     end;
@@ -312,8 +315,8 @@
 
 %% PUBLIC 
 
-get_pubsub_subscription(Id, Context) ->
-    m_rsc:p(Id, pubsub_subscription, Context).
+get_pubsub_xmpp_uri(Id, Context) ->
+    m_rsc:p(Id, pubsub_xmpp_uri, Context).
 
 
 %% @doc Subscribe to a URL, 
@@ -346,7 +349,9 @@
                     %% Create the rsc
                     {ok, Id} = m_rsc_import:create_empty(RscUrl, [{pubsub_xmpp_uri, Uri}], State#state.context),
                     %% Do the subscription
-                    {ok, Id, subscribe_node(exmpp_jid:to_list(Jid), Node, State)}
+                    {subscribed, SubId} = subscribe_node(exmpp_jid:to_list(Jid), Node, State),
+                    m_rsc_update:update(Id, [{pubsub_subscription_subid, SubId}], [{acl_check, false}], State#state.context),
+                    {ok, Id, subscribed}
             end;
 
         undefined ->
@@ -369,14 +374,16 @@
                     error;
                 _ ->
                     ?DEBUG("Subscribe OK"),
-                    subscribed
+                    {SubId, <<"subscribed">>} = subscribe_results(Raw),
+                    ?DEBUG(SubId),
+                    {subscribed, SubId}
             end
     end.
 
 
-%% %% @doc Subscribe to a URL, 
-unsubscribe_node(Service, Node, #state{jid=JID,session=Session}) ->
-    IQ = exmpp_client_pubsub:unsubscribe(exmpp_jid:to_list(JID), Service, Node),
+%% %% @doc Unsubscribe from a URL.
+unsubscribe_node(SubId, Service, Node, #state{jid=JID,session=Session}) ->
+    IQ = exmpp_unsubscribe(SubId, exmpp_jid:to_list(JID), Service, Node),
     PacketId = binary_to_list(exmpp_session:send_packet(Session, exmpp_stanza:set_sender(IQ, JID))),
     receive
         #received_packet{id=PacketId, raw_packet=Raw} ->
@@ -391,6 +398,23 @@
     end.
 
 
+%% @doc Parse the subscription response.
+%% @spec subscribe_results(Packet) -> {subid::binary, subscription_status::binary}
+
+subscribe_results(Element) ->
+    case exmpp_xml:get_element(Element, ?NS_PUBSUB, 'pubsub') of
+        undefined ->
+            {error, invalid_pubsub_response};
+        PSEl ->
+            case exmpp_xml:get_element(PSEl, ?NS_PUBSUB, 'subscription') of
+                undefined ->
+                    {error, invalid_pubsub_response};
+                SubEl ->
+                    { exmpp_xml:get_attribute_as_binary(SubEl, subid, undefined),
+                      exmpp_xml:get_attribute_as_binary(SubEl, subscription, undefined) }
+            end
+    end.
+
 
 %%
 %% XMPP received packet processing
@@ -402,12 +426,13 @@
             undefined;
         Event ->
             Element = exmpp_xml:get_element_by_ns(Event, ?NS_PUBSUB_EVENT),
-            ?DEBUG(Element),
             case exmpp_xml:get_name_as_atom(Element) of
                 items ->
                     exmpp_xml:foreach(fun(_, Item) -> process_pubsub_item(Item, State) end, Element);
                 delete ->
-                    ?DEBUG("Delete notification")
+                    ?DEBUG("Delete notification"),
+                    ?DEBUG(Element)
+                    %% TODO
             end
     end.
 
@@ -447,6 +472,20 @@
     end.
 
 
+
+exmpp_unsubscribe(SubId, From, Service, Node) ->
+    %% Make the <subscribe/> element.
+    Unsubscribe = exmpp_xml:set_attributes(
+		  #xmlel{ns = ?NS_PUBSUB, name = 'unsubscribe'},
+		  [{'node', Node},
+		   {'jid', From},
+           {'subid', SubId}]),
+    %% Prepare the final <iq/>.
+    Pubsub = #xmlel{ns = ?NS_PUBSUB, name = 'pubsub', children = [Unsubscribe]},
+    Iq = ?IQ_SET(Service, "pubsub-" ++ integer_to_list(random:uniform(65536 * 65536))),
+    exmpp_xml:append_child(Iq, Pubsub).
+
+
 %%node_name(Id) ->
 %%    lists:flatten(io_lib:format("/home/testsandbox/zotonic/id-~p", [Id])).
 
