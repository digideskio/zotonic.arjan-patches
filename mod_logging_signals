# HG changeset patch
# Parent 0bdd53c75a41dd8666affc46456bf5379744fd44
Reworked the way mod_logging notifies the log pages; it now uses
mod_signal for interpage communication.

diff --git a/modules/mod_logging/actions/action_logging_addlog.erl b/modules/mod_logging/actions/action_logging_addlog.erl
new file mode 100644
--- /dev/null
+++ b/modules/mod_logging/actions/action_logging_addlog.erl
@@ -0,0 +1,41 @@
+%% @author Arjan Scherpenisse <arjan@scherpenisse.net>
+%% @copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
+
+%% Copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
+%%
+%% Licensed under the Apache License, Version 2.0 (the "License");
+%% you may not use this file except in compliance with the License.
+%% You may obtain a copy of the License at
+%% 
+%%     http://www.apache.org/licenses/LICENSE-2.0
+%% 
+%% Unless required by applicable law or agreed to in writing, software
+%% distributed under the License is distributed on an "AS IS" BASIS,
+%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+%% See the License for the specific language governing permissions and
+%% limitations under the License.
+
+-module(action_logging_addlog).
+-include("zotonic.hrl").
+-export([
+    render_action/4
+]).
+
+render_action(_TriggerId, TargetId, Args, Context) ->
+    SignalProps = proplists:get_value(signal_props, Args),
+    Type = proplists:get_value(type, SignalProps),
+
+    {Tpl, Context1} = z_template:render_to_iolist(proplists:get_value(template, Args, "_admin_log_row.tpl"), Args, Context),
+    Tpl2 = lists:flatten(z_string:line(erlang:iolist_to_binary(Tpl))),
+    {[], z_script:add_script([
+                              "$('", z_utils:js_escape(Tpl2), 
+                              "').hide().insertBefore('#", TargetId, " li:first').fadeIn().css({backgroundColor:'",
+                              log_color(Type), "'}).animate({backgroundColor:'",
+                              log_color(bg), "'}, 8000, 'linear');"], Context1)}.
+
+
+log_color(debug) -> "#ffffff";
+log_color(info) -> "#ffff99";
+log_color(warning) -> "#ffcc99";
+log_color(bg) -> "#f1f1f1";
+log_color(_) -> "#f1f1f1".
diff --git a/modules/mod_logging/mod_logging.erl b/modules/mod_logging/mod_logging.erl
--- a/modules/mod_logging/mod_logging.erl
+++ b/modules/mod_logging/mod_logging.erl
@@ -29,9 +29,7 @@
 -export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).
 -export([start_link/1]).
 -export([
-    add_admin_log_page/1,
     observe_search_query/2, 
-    pid_observe_add_admin_log_page/3,
     pid_observe_log/3
 ]).
 
@@ -42,16 +40,9 @@
 
 %% interface functions
 
-add_admin_log_page(C=#context{page_pid=Pid}) ->
-    z_notifier:first({add_admin_log_page, Pid}, C).
-
-
 observe_search_query({search_query, Req, OffsetLimit}, Context) ->
     search(Req, OffsetLimit, Context).
 
-pid_observe_add_admin_log_page(Pid, {add_admin_log_page, _Pid} = Msg, _Context) ->
-    gen_server:call(Pid, Msg).
-
 pid_observe_log(Pid, {log, #log_message{}=Msg}, Context) ->
     case Msg#log_message.user_id of
         undefined -> gen_server:cast(Pid, {log, Msg#log_message{user_id=z_acl:user(Context)}});
@@ -93,9 +84,6 @@
 %%                                      {stop, Reason, Reply, State} |
 %%                                      {stop, Reason, State}
 %% Description: Handling call messages
-handle_call({add_admin_log_page, Pid}, _From, State) ->
-    Pids = lists:filter(fun erlang:is_process_alive/1, [Pid|State#state.admin_log_pages]),
-    {reply, ok, State#state{admin_log_pages=Pids}};
 handle_call(Message, _From, State) ->
     {stop, {unknown_call, Message}, State}.
 
@@ -159,7 +147,6 @@
     undefined.
 
 
-
 %% @doc Insert a simple log entry. Send an update to all UA's displaying the log.
 handle_simple_log(#log_message{user_id=UserId, type=Type, message=Msg, props=Props}, State) ->
     {ok, Id} = z_db:insert(log, [
@@ -167,33 +154,7 @@
                     {type, Type},
                     {message, Msg}
                 ] ++ Props, State#state.context),
-
-    % Notify admins of any updates
-    case State#state.admin_log_pages of
-        [] -> 
-            nop;
-        AdminPages ->
-            case catch z_template:render_to_iolist("_admin_log_row.tpl", [{id, Id}], State#state.context) of
-                {error, {template_not_found,"_admin_log_row.tpl",enoent}} ->
-                    % We can get a template_not_found error when the system is still starting.
-                    error;
-                {error, Reason} ->
-                    error_logger:info_msg("[~p] Render error of _admin_log_row.tpl: ~p~n", 
-                                          [(State#state.context)#context.host, Reason]),
-                    error;
-                {Tpl, _Ctx} ->
-                    Tpl2 = lists:flatten(z_string:line(erlang:iolist_to_binary(Tpl))),
-                    F = fun(Pid) ->
-                                z_session_page:add_script([
-                                    "$('", z_utils:js_escape(Tpl2), 
-                                    "').hide().insertBefore('#log-area li:first').slideDown().css({backgroundColor:'", 
-                                   log_color(Type), "'}).animate({backgroundColor:'", 
-                                   log_color(bg), "'}, 8000, 'linear');"], Pid)
-                        end,
-                    [F(P) || P <- AdminPages],
-                    ok
-            end
-    end.
+    mod_signal:emit({log_message, [{log_id, Id}, {user_id, UserId}, {type, Type}, {message, Msg}, {props, Props}]}, State#state.context).
 
 
 % All non #log_message{} logs are sent to their own log table. If the severity of the log entry is high enough then
@@ -209,7 +170,8 @@
                 ?LOG_FATAL -> handle_simple_log(Log#log_message{type=fatal}, State);
                 ?LOG_ERROR -> handle_simple_log(Log#log_message{type=error}, State);
                 _Other -> nop
-            end;
+            end,
+            mod_signal:emit({LogType, [{log_id, Id}|Fields]}, State#state.context);
         false ->
             Log = #log_message{
                 message=z_convert:to_binary(proplists:get_value(message, Fields, LogType)),
@@ -248,10 +210,3 @@
 
 opt_user(undefined) -> [];
 opt_user(Id) -> [" (", integer_to_list(Id), ")"].
-
-
-log_color(debug) -> "#ffffff";
-log_color(info) -> "#ffff99";
-log_color(warning) -> "#ffcc99";
-log_color(bg) -> "#f1f1f1";
-log_color(_) -> "#f1f1f1".
diff --git a/modules/mod_logging/scomps/scomp_logging_logwatch.erl b/modules/mod_logging/scomps/scomp_logging_logwatch.erl
deleted file mode 100644
--- a/modules/mod_logging/scomps/scomp_logging_logwatch.erl
+++ /dev/null
@@ -1,28 +0,0 @@
-%% @author Arjan Scherpenisse <arjan@scherpenisse.net>
-%% @copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
-
-%% Copyright 2010 Arjan Scherpenisse <arjan@scherpenisse.net>
-%%
-%% Licensed under the Apache License, Version 2.0 (the "License");
-%% you may not use this file except in compliance with the License.
-%% You may obtain a copy of the License at
-%% 
-%%     http://www.apache.org/licenses/LICENSE-2.0
-%% 
-%% Unless required by applicable law or agreed to in writing, software
-%% distributed under the License is distributed on an "AS IS" BASIS,
-%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-%% See the License for the specific language governing permissions and
-%% limitations under the License.
-
--module(scomp_logging_logwatch).
--behaviour(gen_scomp).
-
--export([vary/2, render/3]).
-
--include("zotonic.hrl").
-
-vary(_Params, _Context) -> nocache.
-render(_Params, _Vars, Context) ->
-    mod_logging:add_admin_log_page(Context),
-    {ok, []}.
diff --git a/modules/mod_logging/templates/_admin_log_row.tpl b/modules/mod_logging/templates/_admin_log_row.tpl
--- a/modules/mod_logging/templates/_admin_log_row.tpl
+++ b/modules/mod_logging/templates/_admin_log_row.tpl
@@ -1,3 +1,4 @@
+{% with signal_props.log_id|default:id as id %}
 {% with m.log[id] as l %}
 <li id="{{ #li.id }}" class="clearfix">
         <span class="zp-5">{{ l.type|default:"-" }}</span>
@@ -21,3 +22,4 @@
         <span class="zp-10">{{ l.created|date:"d M Y, H:i" }}</span>
 </li>
 {% endwith %}
+{% endwith %}
diff --git a/modules/mod_logging/templates/admin_log.tpl b/modules/mod_logging/templates/admin_log.tpl
--- a/modules/mod_logging/templates/admin_log.tpl
+++ b/modules/mod_logging/templates/admin_log.tpl
@@ -35,5 +35,6 @@
 		   </div>
 		{% endwith %}
 
-		{% logwatch %}
+        {% wire action={connect signal={log_message} action={addlog target="log-area"}} %}
+
 {% endblock %}
diff --git a/modules/mod_signal/z_connect.erl b/modules/mod_signal/z_connect.erl
--- a/modules/mod_signal/z_connect.erl
+++ b/modules/mod_signal/z_connect.erl
@@ -57,9 +57,10 @@
 % @doc Render the actions and send the scripts to the page connected to the signal.
 %
 render_page_actions(Signal, Actions, Context) ->
-    Actions1 = [ {Name,  [ {signal, Signal} | Props ] } || {Name, Props} <- Actions],
+    {_, SignalProps} = Signal,
+    Actions1 = [ {Name,  [ {signal, Signal}, {signal_props, SignalProps} | Props ] } || {Name, Props} <- Actions],
     Options  = [{action, X} || X <- Actions1],
-    
+
     %% What parameters should be used here?
     Script = z_script:get_script(z_render:wire(undefined, undefined, {event, Options}, Context)),
     
