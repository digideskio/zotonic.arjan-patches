Sandbox environment

diff -r b06fd9662dda doc/UnitTesting.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/doc/UnitTesting.txt	Sat Jan 30 21:48:52 2010 +0100
@@ -0,0 +1,4 @@
+How to Unit test Zotonic install.
+
+./runtests.sh starts the zotonic system and executes all EUnit tests.
+
diff -r b06fd9662dda priv/sites/testsandbox/testsandbox.erl
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/priv/sites/testsandbox/testsandbox.erl	Sat Jan 30 21:48:52 2010 +0100
@@ -0,0 +1,106 @@
+%% @author Arjan Scherpenisse <arjan@scherpenisse.net>
+%% @copyright 2010 Arjan Scherpenisse
+%% @date 2010-01-30
+%% @doc Module implementing a sandbox website for unit testing purposes.
+
+%% Licensed under the Apache License, Version 2.0 (the "License");
+%% you may not use this file except in compliance with the License.
+%% You may obtain a copy of the License at
+%% 
+%%     http://www.apache.org/licenses/LICENSE-2.0
+%% 
+%% Unless required by applicable law or agreed to in writing, software
+%% distributed under the License is distributed on an "AS IS" BASIS,
+%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+%% See the License for the specific language governing permissions and
+%% limitations under the License.
+
+-module(testsandbox).
+-author("Arjan Scherpenisse <arjan@scherpenisse.net>").
+-behaviour(gen_server).
+
+-mod_title("Test sandbox").
+-mod_description("Module implementing a sandbox website for unit testing purposes.").
+-mod_prio(10).
+
+%% gen_server exports
+-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).
+-export([start_link/1]).
+
+%% interface functions
+-export([
+]).
+
+-include_lib("zotonic.hrl").
+
+-record(state, {context}).
+
+
+%%====================================================================
+%% API
+%%====================================================================
+%% @spec start_link() -> {ok,Pid} | ignore | {error,Error}
+%% @doc Starts the server
+start_link(Args) when is_list(Args) ->
+    gen_server:start_link(?MODULE, Args, []).
+
+%%====================================================================
+%% gen_server callbacks
+%%====================================================================
+
+%% @spec init(Args) -> {ok, State} |
+%%                     {ok, State, Timeout} |
+%%                     ignore               |
+%%                     {stop, Reason}
+%% @doc Initiates the server.
+init(Args) ->
+    process_flag(trap_exit, true),
+    {context, Context} = proplists:lookup(context, Args),
+    {ok, #state{context=z_context:new(Context)}}.
+
+%% @spec handle_call(Request, From, State) -> {reply, Reply, State} |
+%%                                      {reply, Reply, State, Timeout} |
+%%                                      {noreply, State} |
+%%                                      {noreply, State, Timeout} |
+%%                                      {stop, Reason, Reply, State} |
+%%                                      {stop, Reason, State}
+%% Description: Handling call messages
+%% @doc Trap unknown calls
+handle_call(Message, _From, State) ->
+    {stop, {unknown_call, Message}, State}.
+
+
+%% @spec handle_cast(Msg, State) -> {noreply, State} |
+%%                                  {noreply, State, Timeout} |
+%%                                  {stop, Reason, State}
+%% @doc Trap unknown casts
+handle_cast(Message, State) ->
+    {stop, {unknown_cast, Message}, State}.
+
+
+
+%% @spec handle_info(Info, State) -> {noreply, State} |
+%%                                       {noreply, State, Timeout} |
+%%                                       {stop, Reason, State}
+%% @doc Handling all non call/cast messages
+handle_info(_Info, State) ->
+    {noreply, State}.
+
+%% @spec terminate(Reason, State) -> void()
+%% @doc This function is called by a gen_server when it is about to
+%% terminate. It should be the opposite of Module:init/1 and do any necessary
+%% cleaning up. When it returns, the gen_server terminates with Reason.
+%% The return value is ignored.
+terminate(_Reason, _State) ->
+    ok.
+
+%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
+%% @doc Convert process state when code is changed
+
+code_change(_OldVsn, State, _Extra) ->
+    {ok, State}.
+
+
+%%====================================================================
+%% support functions
+%%====================================================================
